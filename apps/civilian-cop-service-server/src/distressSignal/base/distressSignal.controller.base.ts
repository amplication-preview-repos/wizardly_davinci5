/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DistressSignalService } from "../distressSignal.service";
import { DistressSignalCreateInput } from "./DistressSignalCreateInput";
import { DistressSignal } from "./DistressSignal";
import { DistressSignalFindManyArgs } from "./DistressSignalFindManyArgs";
import { DistressSignalWhereUniqueInput } from "./DistressSignalWhereUniqueInput";
import { DistressSignalUpdateInput } from "./DistressSignalUpdateInput";

export class DistressSignalControllerBase {
  constructor(protected readonly service: DistressSignalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DistressSignal })
  async createDistressSignal(
    @common.Body() data: DistressSignalCreateInput
  ): Promise<DistressSignal> {
    return await this.service.createDistressSignal({
      data: {
        ...data,

        civilian: data.civilian
          ? {
              connect: data.civilian,
            }
          : undefined,

        cop: data.cop
          ? {
              connect: data.cop,
            }
          : undefined,
      },
      select: {
        civilian: {
          select: {
            id: true,
          },
        },

        cop: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        message: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DistressSignal] })
  @ApiNestedQuery(DistressSignalFindManyArgs)
  async distressSignals(
    @common.Req() request: Request
  ): Promise<DistressSignal[]> {
    const args = plainToClass(DistressSignalFindManyArgs, request.query);
    return this.service.distressSignals({
      ...args,
      select: {
        civilian: {
          select: {
            id: true,
          },
        },

        cop: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        message: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DistressSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async distressSignal(
    @common.Param() params: DistressSignalWhereUniqueInput
  ): Promise<DistressSignal | null> {
    const result = await this.service.distressSignal({
      where: params,
      select: {
        civilian: {
          select: {
            id: true,
          },
        },

        cop: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        message: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DistressSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDistressSignal(
    @common.Param() params: DistressSignalWhereUniqueInput,
    @common.Body() data: DistressSignalUpdateInput
  ): Promise<DistressSignal | null> {
    try {
      return await this.service.updateDistressSignal({
        where: params,
        data: {
          ...data,

          civilian: data.civilian
            ? {
                connect: data.civilian,
              }
            : undefined,

          cop: data.cop
            ? {
                connect: data.cop,
              }
            : undefined,
        },
        select: {
          civilian: {
            select: {
              id: true,
            },
          },

          cop: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          location: true,
          message: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DistressSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDistressSignal(
    @common.Param() params: DistressSignalWhereUniqueInput
  ): Promise<DistressSignal | null> {
    try {
      return await this.service.deleteDistressSignal({
        where: params,
        select: {
          civilian: {
            select: {
              id: true,
            },
          },

          cop: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          location: true,
          message: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
