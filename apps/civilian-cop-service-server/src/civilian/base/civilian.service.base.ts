/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Civilian as PrismaCivilian,
  DistressSignal as PrismaDistressSignal,
  Rating as PrismaRating,
} from "@prisma/client";

export class CivilianServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CivilianCountArgs, "select">): Promise<number> {
    return this.prisma.civilian.count(args);
  }

  async civilians<T extends Prisma.CivilianFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CivilianFindManyArgs>
  ): Promise<PrismaCivilian[]> {
    return this.prisma.civilian.findMany<Prisma.CivilianFindManyArgs>(args);
  }
  async civilian<T extends Prisma.CivilianFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CivilianFindUniqueArgs>
  ): Promise<PrismaCivilian | null> {
    return this.prisma.civilian.findUnique(args);
  }
  async createCivilian<T extends Prisma.CivilianCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CivilianCreateArgs>
  ): Promise<PrismaCivilian> {
    return this.prisma.civilian.create<T>(args);
  }
  async updateCivilian<T extends Prisma.CivilianUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CivilianUpdateArgs>
  ): Promise<PrismaCivilian> {
    return this.prisma.civilian.update<T>(args);
  }
  async deleteCivilian<T extends Prisma.CivilianDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CivilianDeleteArgs>
  ): Promise<PrismaCivilian> {
    return this.prisma.civilian.delete(args);
  }

  async findDistressSignals(
    parentId: string,
    args: Prisma.DistressSignalFindManyArgs
  ): Promise<PrismaDistressSignal[]> {
    return this.prisma.civilian
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .distressSignals(args);
  }

  async findRatings(
    parentId: string,
    args: Prisma.RatingFindManyArgs
  ): Promise<PrismaRating[]> {
    return this.prisma.civilian
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ratings(args);
  }
}
