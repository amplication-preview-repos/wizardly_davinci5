/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DistressSignal as PrismaDistressSignal,
  Civilian as PrismaCivilian,
  Cop as PrismaCop,
} from "@prisma/client";

export class DistressSignalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DistressSignalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.distressSignal.count(args);
  }

  async distressSignals<T extends Prisma.DistressSignalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DistressSignalFindManyArgs>
  ): Promise<PrismaDistressSignal[]> {
    return this.prisma.distressSignal.findMany<Prisma.DistressSignalFindManyArgs>(
      args
    );
  }
  async distressSignal<T extends Prisma.DistressSignalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DistressSignalFindUniqueArgs>
  ): Promise<PrismaDistressSignal | null> {
    return this.prisma.distressSignal.findUnique(args);
  }
  async createDistressSignal<T extends Prisma.DistressSignalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DistressSignalCreateArgs>
  ): Promise<PrismaDistressSignal> {
    return this.prisma.distressSignal.create<T>(args);
  }
  async updateDistressSignal<T extends Prisma.DistressSignalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DistressSignalUpdateArgs>
  ): Promise<PrismaDistressSignal> {
    return this.prisma.distressSignal.update<T>(args);
  }
  async deleteDistressSignal<T extends Prisma.DistressSignalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DistressSignalDeleteArgs>
  ): Promise<PrismaDistressSignal> {
    return this.prisma.distressSignal.delete(args);
  }

  async getCivilian(parentId: string): Promise<PrismaCivilian | null> {
    return this.prisma.distressSignal
      .findUnique({
        where: { id: parentId },
      })
      .civilian();
  }

  async getCop(parentId: string): Promise<PrismaCop | null> {
    return this.prisma.distressSignal
      .findUnique({
        where: { id: parentId },
      })
      .cop();
  }
}
