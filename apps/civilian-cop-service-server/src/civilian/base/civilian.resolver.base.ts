/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Civilian } from "./Civilian";
import { CivilianCountArgs } from "./CivilianCountArgs";
import { CivilianFindManyArgs } from "./CivilianFindManyArgs";
import { CivilianFindUniqueArgs } from "./CivilianFindUniqueArgs";
import { CreateCivilianArgs } from "./CreateCivilianArgs";
import { UpdateCivilianArgs } from "./UpdateCivilianArgs";
import { DeleteCivilianArgs } from "./DeleteCivilianArgs";
import { DistressSignalFindManyArgs } from "../../distressSignal/base/DistressSignalFindManyArgs";
import { DistressSignal } from "../../distressSignal/base/DistressSignal";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { CivilianService } from "../civilian.service";
@graphql.Resolver(() => Civilian)
export class CivilianResolverBase {
  constructor(protected readonly service: CivilianService) {}

  async _civiliansMeta(
    @graphql.Args() args: CivilianCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Civilian])
  async civilians(
    @graphql.Args() args: CivilianFindManyArgs
  ): Promise<Civilian[]> {
    return this.service.civilians(args);
  }

  @graphql.Query(() => Civilian, { nullable: true })
  async civilian(
    @graphql.Args() args: CivilianFindUniqueArgs
  ): Promise<Civilian | null> {
    const result = await this.service.civilian(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Civilian)
  async createCivilian(
    @graphql.Args() args: CreateCivilianArgs
  ): Promise<Civilian> {
    return await this.service.createCivilian({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Civilian)
  async updateCivilian(
    @graphql.Args() args: UpdateCivilianArgs
  ): Promise<Civilian | null> {
    try {
      return await this.service.updateCivilian({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Civilian)
  async deleteCivilian(
    @graphql.Args() args: DeleteCivilianArgs
  ): Promise<Civilian | null> {
    try {
      return await this.service.deleteCivilian(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DistressSignal], { name: "distressSignals" })
  async findDistressSignals(
    @graphql.Parent() parent: Civilian,
    @graphql.Args() args: DistressSignalFindManyArgs
  ): Promise<DistressSignal[]> {
    const results = await this.service.findDistressSignals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Rating], { name: "ratings" })
  async findRatings(
    @graphql.Parent() parent: Civilian,
    @graphql.Args() args: RatingFindManyArgs
  ): Promise<Rating[]> {
    const results = await this.service.findRatings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
