/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cop } from "./Cop";
import { CopCountArgs } from "./CopCountArgs";
import { CopFindManyArgs } from "./CopFindManyArgs";
import { CopFindUniqueArgs } from "./CopFindUniqueArgs";
import { CreateCopArgs } from "./CreateCopArgs";
import { UpdateCopArgs } from "./UpdateCopArgs";
import { DeleteCopArgs } from "./DeleteCopArgs";
import { DistressSignalFindManyArgs } from "../../distressSignal/base/DistressSignalFindManyArgs";
import { DistressSignal } from "../../distressSignal/base/DistressSignal";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { CopService } from "../cop.service";
@graphql.Resolver(() => Cop)
export class CopResolverBase {
  constructor(protected readonly service: CopService) {}

  async _copsMeta(
    @graphql.Args() args: CopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cop])
  async cops(@graphql.Args() args: CopFindManyArgs): Promise<Cop[]> {
    return this.service.cops(args);
  }

  @graphql.Query(() => Cop, { nullable: true })
  async cop(@graphql.Args() args: CopFindUniqueArgs): Promise<Cop | null> {
    const result = await this.service.cop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cop)
  async createCop(@graphql.Args() args: CreateCopArgs): Promise<Cop> {
    return await this.service.createCop({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cop)
  async updateCop(@graphql.Args() args: UpdateCopArgs): Promise<Cop | null> {
    try {
      return await this.service.updateCop({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cop)
  async deleteCop(@graphql.Args() args: DeleteCopArgs): Promise<Cop | null> {
    try {
      return await this.service.deleteCop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DistressSignal], { name: "distressSignals" })
  async findDistressSignals(
    @graphql.Parent() parent: Cop,
    @graphql.Args() args: DistressSignalFindManyArgs
  ): Promise<DistressSignal[]> {
    const results = await this.service.findDistressSignals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Rating], { name: "ratings" })
  async findRatings(
    @graphql.Parent() parent: Cop,
    @graphql.Args() args: RatingFindManyArgs
  ): Promise<Rating[]> {
    const results = await this.service.findRatings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
