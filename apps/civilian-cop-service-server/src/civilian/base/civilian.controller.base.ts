/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CivilianService } from "../civilian.service";
import { CivilianCreateInput } from "./CivilianCreateInput";
import { Civilian } from "./Civilian";
import { CivilianFindManyArgs } from "./CivilianFindManyArgs";
import { CivilianWhereUniqueInput } from "./CivilianWhereUniqueInput";
import { CivilianUpdateInput } from "./CivilianUpdateInput";
import { DistressSignalFindManyArgs } from "../../distressSignal/base/DistressSignalFindManyArgs";
import { DistressSignal } from "../../distressSignal/base/DistressSignal";
import { DistressSignalWhereUniqueInput } from "../../distressSignal/base/DistressSignalWhereUniqueInput";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { RatingWhereUniqueInput } from "../../rating/base/RatingWhereUniqueInput";

export class CivilianControllerBase {
  constructor(protected readonly service: CivilianService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Civilian })
  async createCivilian(
    @common.Body() data: CivilianCreateInput
  ): Promise<Civilian> {
    return await this.service.createCivilian({
      data: data,
      select: {
        createdAt: true,
        displayName: true,
        email: true,
        id: true,
        phone: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Civilian] })
  @ApiNestedQuery(CivilianFindManyArgs)
  async civilians(@common.Req() request: Request): Promise<Civilian[]> {
    const args = plainToClass(CivilianFindManyArgs, request.query);
    return this.service.civilians({
      ...args,
      select: {
        createdAt: true,
        displayName: true,
        email: true,
        id: true,
        phone: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Civilian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async civilian(
    @common.Param() params: CivilianWhereUniqueInput
  ): Promise<Civilian | null> {
    const result = await this.service.civilian({
      where: params,
      select: {
        createdAt: true,
        displayName: true,
        email: true,
        id: true,
        phone: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Civilian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCivilian(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() data: CivilianUpdateInput
  ): Promise<Civilian | null> {
    try {
      return await this.service.updateCivilian({
        where: params,
        data: data,
        select: {
          createdAt: true,
          displayName: true,
          email: true,
          id: true,
          phone: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Civilian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCivilian(
    @common.Param() params: CivilianWhereUniqueInput
  ): Promise<Civilian | null> {
    try {
      return await this.service.deleteCivilian({
        where: params,
        select: {
          createdAt: true,
          displayName: true,
          email: true,
          id: true,
          phone: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/distressSignals")
  @ApiNestedQuery(DistressSignalFindManyArgs)
  async findDistressSignals(
    @common.Req() request: Request,
    @common.Param() params: CivilianWhereUniqueInput
  ): Promise<DistressSignal[]> {
    const query = plainToClass(DistressSignalFindManyArgs, request.query);
    const results = await this.service.findDistressSignals(params.id, {
      ...query,
      select: {
        civilian: {
          select: {
            id: true,
          },
        },

        cop: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        message: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/distressSignals")
  async connectDistressSignals(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() body: DistressSignalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      distressSignals: {
        connect: body,
      },
    };
    await this.service.updateCivilian({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/distressSignals")
  async updateDistressSignals(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() body: DistressSignalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      distressSignals: {
        set: body,
      },
    };
    await this.service.updateCivilian({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/distressSignals")
  async disconnectDistressSignals(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() body: DistressSignalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      distressSignals: {
        disconnect: body,
      },
    };
    await this.service.updateCivilian({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ratings")
  @ApiNestedQuery(RatingFindManyArgs)
  async findRatings(
    @common.Req() request: Request,
    @common.Param() params: CivilianWhereUniqueInput
  ): Promise<Rating[]> {
    const query = plainToClass(RatingFindManyArgs, request.query);
    const results = await this.service.findRatings(params.id, {
      ...query,
      select: {
        civilian: {
          select: {
            id: true,
          },
        },

        comment: true,

        cop: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        ratingValue: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ratings")
  async connectRatings(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        connect: body,
      },
    };
    await this.service.updateCivilian({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ratings")
  async updateRatings(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        set: body,
      },
    };
    await this.service.updateCivilian({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ratings")
  async disconnectRatings(
    @common.Param() params: CivilianWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        disconnect: body,
      },
    };
    await this.service.updateCivilian({
      where: params,
      data,
      select: { id: true },
    });
  }
}
