/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Cop as PrismaCop,
  DistressSignal as PrismaDistressSignal,
  Rating as PrismaRating,
} from "@prisma/client";

export class CopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CopCountArgs, "select">): Promise<number> {
    return this.prisma.cop.count(args);
  }

  async cops<T extends Prisma.CopFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CopFindManyArgs>
  ): Promise<PrismaCop[]> {
    return this.prisma.cop.findMany<Prisma.CopFindManyArgs>(args);
  }
  async cop<T extends Prisma.CopFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CopFindUniqueArgs>
  ): Promise<PrismaCop | null> {
    return this.prisma.cop.findUnique(args);
  }
  async createCop<T extends Prisma.CopCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CopCreateArgs>
  ): Promise<PrismaCop> {
    return this.prisma.cop.create<T>(args);
  }
  async updateCop<T extends Prisma.CopUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CopUpdateArgs>
  ): Promise<PrismaCop> {
    return this.prisma.cop.update<T>(args);
  }
  async deleteCop<T extends Prisma.CopDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CopDeleteArgs>
  ): Promise<PrismaCop> {
    return this.prisma.cop.delete(args);
  }

  async findDistressSignals(
    parentId: string,
    args: Prisma.DistressSignalFindManyArgs
  ): Promise<PrismaDistressSignal[]> {
    return this.prisma.cop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .distressSignals(args);
  }

  async findRatings(
    parentId: string,
    args: Prisma.RatingFindManyArgs
  ): Promise<PrismaRating[]> {
    return this.prisma.cop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ratings(args);
  }
}
