/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DistressSignal } from "./DistressSignal";
import { DistressSignalCountArgs } from "./DistressSignalCountArgs";
import { DistressSignalFindManyArgs } from "./DistressSignalFindManyArgs";
import { DistressSignalFindUniqueArgs } from "./DistressSignalFindUniqueArgs";
import { CreateDistressSignalArgs } from "./CreateDistressSignalArgs";
import { UpdateDistressSignalArgs } from "./UpdateDistressSignalArgs";
import { DeleteDistressSignalArgs } from "./DeleteDistressSignalArgs";
import { Civilian } from "../../civilian/base/Civilian";
import { Cop } from "../../cop/base/Cop";
import { DistressSignalService } from "../distressSignal.service";
@graphql.Resolver(() => DistressSignal)
export class DistressSignalResolverBase {
  constructor(protected readonly service: DistressSignalService) {}

  async _distressSignalsMeta(
    @graphql.Args() args: DistressSignalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DistressSignal])
  async distressSignals(
    @graphql.Args() args: DistressSignalFindManyArgs
  ): Promise<DistressSignal[]> {
    return this.service.distressSignals(args);
  }

  @graphql.Query(() => DistressSignal, { nullable: true })
  async distressSignal(
    @graphql.Args() args: DistressSignalFindUniqueArgs
  ): Promise<DistressSignal | null> {
    const result = await this.service.distressSignal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DistressSignal)
  async createDistressSignal(
    @graphql.Args() args: CreateDistressSignalArgs
  ): Promise<DistressSignal> {
    return await this.service.createDistressSignal({
      ...args,
      data: {
        ...args.data,

        civilian: args.data.civilian
          ? {
              connect: args.data.civilian,
            }
          : undefined,

        cop: args.data.cop
          ? {
              connect: args.data.cop,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DistressSignal)
  async updateDistressSignal(
    @graphql.Args() args: UpdateDistressSignalArgs
  ): Promise<DistressSignal | null> {
    try {
      return await this.service.updateDistressSignal({
        ...args,
        data: {
          ...args.data,

          civilian: args.data.civilian
            ? {
                connect: args.data.civilian,
              }
            : undefined,

          cop: args.data.cop
            ? {
                connect: args.data.cop,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DistressSignal)
  async deleteDistressSignal(
    @graphql.Args() args: DeleteDistressSignalArgs
  ): Promise<DistressSignal | null> {
    try {
      return await this.service.deleteDistressSignal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Civilian, {
    nullable: true,
    name: "civilian",
  })
  async getCivilian(
    @graphql.Parent() parent: DistressSignal
  ): Promise<Civilian | null> {
    const result = await this.service.getCivilian(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Cop, {
    nullable: true,
    name: "cop",
  })
  async getCop(@graphql.Parent() parent: DistressSignal): Promise<Cop | null> {
    const result = await this.service.getCop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
